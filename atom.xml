<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>世清の蜗居</title>
  
  <subtitle>记录生活的点滴</subtitle>
  <link href="https://baishiqing.github.io/atom.xml" rel="self"/>
  
  <link href="https://baishiqing.github.io/"/>
  <updated>2022-11-09T14:46:15.206Z</updated>
  <id>https://baishiqing.github.io/</id>
  
  <author>
    <name>白梓晨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python基础语法</title>
    <link href="https://baishiqing.github.io/2022/11/09/Python%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/"/>
    <id>https://baishiqing.github.io/2022/11/09/Python%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/</id>
    <published>2022-11-09T14:44:31.538Z</published>
    <updated>2022-11-09T14:46:15.206Z</updated>
    
    <content type="html"><![CDATA[<p>Python 高级进阶<br><span id="more"></span></p><hr><h1 id="Python-高级进阶"><a href="#Python-高级进阶" class="headerlink" title="Python 高级进阶"></a>Python 高级进阶</h1><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><blockquote><p>类的三大特点</p></blockquote><ul><li><p>封装 ：将同一类方法封装到一个类中；将属性封装到方法中；将数据封装到对象中</p></li><li><p>继承 ：（继承父类的类变量和方法）python支持多继承，查找函数是从左到右的顺序（C3算法）</p><ul><li><code>类名.__mro__</code>返回该类的继承顺序</li><li><code>super(类名,self)</code>从该类开始继承</li></ul></li><li><p>多态 ：java基于接口，抽象类和抽象方法来实现；而在 python 不同类的对象（多种形态都可以）调用同一个函数实现某个功能，（常用于）子类继承抽象类实现多态</p></li></ul><p>类之间的关系：</p><ul><li>依赖关系：狗与主人的关系 <ul><li>实现：一个对象传入另一个对象中</li></ul></li><li>关联关系：与女朋友的关系<ul><li>实现：再封装一个关系类</li></ul></li><li>组合关系：人的器官，由一堆组件构成完整的实体，必须寄生于宿主<ul><li>实现：组件在宿主类<code>__init__()</code>中才能对象实例化</li></ul></li><li>聚合关系：电脑的各个部件</li><li>继承关系：类的三大特性之一，子承父业</li></ul><h3 id="import导入事项"><a href="#import导入事项" class="headerlink" title="import导入事项"></a>import导入事项</h3><p>1.</p><hr><p>==在命令行内 import xxx 只会导入一次==</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> imp <span class="keyword">import</span> reload</span><br><span class="line">reload(xxx) <span class="comment">#重新导入xxx模块</span></span><br></pre></td></tr></table></figure><p>2.</p><hr><p>import xxx # 可以修改xxx.py模块的内容</p><p>from xxx import attrName / funName # 不会修改xxx.py模块中内容</p><p>3.</p><hr><p>import xxx # 导入失败，可查看sys.path</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys.path.insert(<span class="number">0</span>,<span class="string">&#x27;/home/python&#x27;</span>) <span class="comment">#/home/python是import的py文件所在位置</span></span><br></pre></td></tr></table></figure><h3 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h3><p>==python中万物皆引用==</p><blockquote><p>浅拷贝：引用，指向</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b=a <span class="comment"># id(a) == id(b)，仅仅是指向</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">b=copy.copy(a) <span class="comment"># 拷贝元组时仅仅是指向，因为元组是不可变类型id(a) == id(b)；拷贝列表时 id(a) != id(b)，创建列表，元素还是指向</span></span><br></pre></td></tr></table></figure><blockquote><p>深拷贝</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">b=copy.deepcopy(a) <span class="comment"># 只要有可变类型时 (a) != id(b)；都是元组时 id(a) == id(b)</span></span><br></pre></td></tr></table></figure><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xxx</span>(<span class="params">cls</span>):</span></span><br></pre></td></tr></table></figure><p>==类方法==不能访问实例变量，只能访问类变量。因为 self 参数接受的不是实例本身，而是类本身cls。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xxx</span>():</span></span><br></pre></td></tr></table></figure><p>==静态方法==不能访问类变量和实例变量。因为它隔断了方法与类<em>/</em>实例的任何关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xxx</span>(<span class="params">self</span>):</span></span><br></pre></td></tr></table></figure><p>==属性方法==将方法变成静态属性；仅有一个self参数。将复杂的处理封装到方法中，获取返回值只需要当做调用属性。</p><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p>类属性是公有属性</p><p><code>__init__()</code>构造函数，里面写的是==实例属性==</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7849/image-20221107200705325.png" alt="python中的属性"></p><p><code>_xxx</code> 类的私有属性，其他模块无法访问</p><p><code>__xxx</code> 类的私有属性，其他类无法访问（更狠），因为编辑器会重命名。</p><h3 id="魔法属性-方法"><a href="#魔法属性-方法" class="headerlink" title="魔法属性/方法"></a>魔法属性/方法</h3><p><code>__new__()</code> 创建对象self，申请一个内存空间</p><p><code>__init__()</code> 初始化实例对象</p><p><code>__del__()</code> 对象在内存释放时，自动触发</p><p><code>__class__</code> 指向类对象，输出创建对象的类</p><p><code>__module__</code> 输出创建对象的类所在模块</p><p><code>__dict__</code> 输出类或对象的属性</p><p><code>__doc__</code> 输出类的描述</p><p><code>__name__</code> 输出模块名，区分该文件是本模块的<code>&#39;__main__&#39;</code>，还是被引用的模块名</p><p><code>if __name__ == &#39;__main__&#39;:</code> 内常写测试内容</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7849/image-20221108185400865.png" alt="类对象(共有的)与实例对象(私有的)"></p><p>类属性和类方法，都属于类，在内存只保存一份；调用方法的参数不同，实例对象的name属性不同。</p><h3 id="访问文件"><a href="#访问文件" class="headerlink" title="访问文件"></a>访问文件</h3><blockquote><p>写入</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;hello,world!!!&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>读取</p></blockquote><p>read() 按字符读取</p><p>readline() 读入一行</p><p>readlines() 以列表形式全部读入</p><p>情形一：分行读入，逐行处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fo=<span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo: <span class="comment"># fo.read(x),读取前x个字符</span></span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">fo.close()   </span><br></pre></td></tr></table></figure><p>情形二：一次读入，分行处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fo:</span><br><span class="line">    <span class="built_in">print</span>(fo.read())    </span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><blockquote><p>isinstance(obj,cls)</p></blockquote><p>检查obj是否是cls的对象</p><blockquote><p><code>:</code> 描述函数参数的类型</p><p><code>-&gt;</code> 描述函数的返回类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x:<span class="built_in">int</span>, y:<span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span>  </span><br><span class="line">    <span class="keyword">return</span> x+y</span><br></pre></td></tr></table></figure><p>只是起到提示效果</p><blockquote><p>值类型 与 引用类型</p></blockquote><p>数值，布尔型，字符串，元组是值类型，本身不允许被修改(不可变类型)，所以不会发生共享内存问题。</p><p>列表，集合，字典是引用类型，本身允许修改(可变类型)，增删内容不会改变地址。</p><blockquote><p><em>args是元组，*</em>kwargs是字典</p></blockquote><p>实参表示拆包</p><blockquote><p>GIL（全局解释器锁）</p></blockquote><p>因历史原因Cpython解释器保证同一时刻只有一个线程可以执行代码。所以==python中并发的一定是多进程，多线程没用==</p><p>但在网络程序中，多线程更快。比如抓取网页。</p><p>小节:</p><ul><li><p>计算密集型：进程</p></li><li><p>IO密集型：线程、协程</p></li></ul><p>a=100：str</p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><blockquote><p>理解</p></blockquote><p>“正射”是正向过程，就相当于赋值；反射也就是反过来查某个属性是否存在</p><blockquote><p>魔法方法</p></blockquote><p><code>dir()</code> 以列表形式返回属性和方法</p><ul><li><p>检测是否含有某属性</p><ul><li><code>hasattr()</code></li></ul></li><li><p>获取属性</p><ul><li><code>getattr(x,&#39;y&#39;)</code>等价于<code>x.y</code> </li></ul></li><li><p>设置属性</p><ul><li><code>setattr(x,&#39;y&#39;,v)</code> 等价于<code>x.y=v</code></li></ul></li><li><p>删除属性</p><ul><li><code>delattr(x,&#39;y&#39;)</code>等价于<code>del x.y</code></li></ul></li></ul><p>举个栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登录页面&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;注册页面&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">content</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;内容页面&#x27;</span>)</span><br><span class="line"></span><br><span class="line">u=User()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先判断是否含有某属性，再获取该属性，以防止属性不存在报异常</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    user_cmd = <span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&gt;:&quot;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(u,user_cmd):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">getattr</span>(u,user_cmd).__name__) <span class="comment"># getattr(u,user_cmd) 此时不能替换u.user_cmd</span></span><br><span class="line">        func=<span class="built_in">getattr</span>(u,user_cmd)</span><br><span class="line">        func()</span><br><span class="line">        <span class="comment"># 等同于getattr(u,user_cmd)()</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><blockquote><p>一般使用<code>try...except...</code>语句：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num1=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;num1:&quot;</span>))</span><br><span class="line">        num2=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;num2:&quot;</span>))</span><br><span class="line">        res=num1+num2</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;result:<span class="subst">&#123;res&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> num1.isdigit()):</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        <span class="comment">#raise Exception #主动触发异常</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e: <span class="comment"># Exception是异常的基类</span></span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有异常才会执行&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;有没有异常都会执行&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>断言assert </p></blockquote><p>判断代码是否符合预期，否则报错。如：<code>assert type(name) is str</code></p><blockquote><p>raise </p></blockquote><p>主动触发异常。如：<code>if(not num1.isdigit()): raise</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python 高级进阶&lt;br&gt;</summary>
    
    
    
    <category term="学习" scheme="https://baishiqing.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="编程" scheme="https://baishiqing.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>bat命令</title>
    <link href="https://baishiqing.github.io/2022/04/14/bat%E5%91%BD%E4%BB%A4/"/>
    <id>https://baishiqing.github.io/2022/04/14/bat%E5%91%BD%E4%BB%A4/</id>
    <published>2022-04-14T09:32:12.000Z</published>
    <updated>2022-04-19T02:53:23.897Z</updated>
    
    <content type="html"><![CDATA[<p>bat命令语句<br><span id="more"></span></p><blockquote><p>激活conda虚拟环境<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">D:</span><br><span class="line">cd D:<span class="symbol">\C</span>ode<span class="symbol">\b</span>sq</span><br><span class="line">call activate C:<span class="symbol">\P</span>rogramData<span class="symbol">\A</span>naconda3<span class="symbol">\e</span>nvs<span class="symbol">\A</span>I</span><br><span class="line">python main.py</span><br></pre></td></tr></table></figure></p><p>启动前端页面npm<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@echo <span class="literal">off</span></span><br><span class="line">cd C:<span class="string">\Users\Administrator\Desktop\demo</span></span><br><span class="line"><span class="built_in">npm</span> run dev</span><br></pre></td></tr></table></figure></p><p>启动chrome浏览器<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\G</span>oogle<span class="symbol">\C</span>hrome<span class="symbol">\A</span>pplication<span class="symbol">\c</span>hrome.exe&quot; --app=http://localhost:8080</span><br></pre></td></tr></table></figure></p><p>同时启动多个bat文件<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cd</span> C:\Users\Administrator\Desktop\<span class="built_in">start</span>\resource</span><br><span class="line"><span class="built_in">start</span>  <span class="number">1</span>.bat</span><br><span class="line"><span class="built_in">start</span>  <span class="number">1</span>.bat</span><br></pre></td></tr></table></figure></p></blockquote><p>call与start的区别:</p><ol><li>调用范围不同；call主要用来进行批处理的<mark>内部调用</mark>,也可以调用其他可执行文件;start不能进行内部调用，但可以执行基本上所有的外部程序。</li><li>调用方式不同: call另一个批处理时是在<mark>同一窗体进程</mark>里执行；start执行另外一个批处理时是在新启的窗体进程里进行。</li><li>调用结果不同: call调用可以把参数或变量传给被调用的批处理，而且被调用的批处理也可以设置参数或变量以便<mark>回传</mark>;而start只能把参数或变量传给被调用的批处理。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;bat命令语句&lt;br&gt;</summary>
    
    
    
    <category term="学习" scheme="https://baishiqing.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="编程" scheme="https://baishiqing.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>图像在频率域中的处理</title>
    <link href="https://baishiqing.github.io/2022/03/04/%E5%9B%BE%E5%83%8F%E5%9C%A8%E9%A2%91%E7%8E%87%E5%9F%9F%E4%B8%AD%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>https://baishiqing.github.io/2022/03/04/%E5%9B%BE%E5%83%8F%E5%9C%A8%E9%A2%91%E7%8E%87%E5%9F%9F%E4%B8%AD%E7%9A%84%E5%A4%84%E7%90%86/</id>
    <published>2022-03-04T01:16:15.000Z</published>
    <updated>2022-03-15T11:58:49.790Z</updated>
    
    <content type="html"><![CDATA[<p>傅里叶<br><span id="more"></span></p><h2 id="傅里叶变化"><a href="#傅里叶变化" class="headerlink" title="傅里叶变化"></a>傅里叶变化</h2><ul><li>数学意义：将一个函数转换为一系列周期函数</li><li>物理意义：将图像从空间域转换成频率域,也就是说，将图像的灰度分布函数变为频率分布函数<blockquote><p>自我理解：将第三维的颜色通道转化为灰度值的梯度</p></blockquote></li></ul><h3 id="频谱移至圆心的目的"><a href="#频谱移至圆心的目的" class="headerlink" title="频谱移至圆心的目的"></a>频谱移至圆心的目的</h3><ul><li>清晰观察图像频率分布</li><li>用带阻滤波器分离出有周期性规律的干扰信号(除中心外的其他亮点集合)</li></ul><blockquote><p>ps:图像的频率是灰度的梯度，灰度变化越缓慢则频率越低，亮度越低；能量集中于低频分量</p></blockquote><p>高频分量有：绝大部分噪声(低通滤波器)，边缘部分(增强)<br>低频分量：轮廓信息</p><p>空间域的卷积相当于频率域的乘积；空间域的乘积相当于频率域卷积(附加一个系数)</p><h3 id="滤波器的类别"><a href="#滤波器的类别" class="headerlink" title="滤波器的类别"></a>滤波器的类别</h3><ul><li>高通滤波器：让图像使低频分量抑制，高频分量通过。效果找到边界</li><li>低通滤波器：让图像使高频分量抑制，低频分量通过。效果去噪模糊图像</li><li>带通滤波器：使图像在某一部分的频率信息通过，其他过低或过高都抑制</li><li>带阻滤波器: 与带通相反</li></ul><p>代码展示：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="离散余弦变换，gabor-小波"><a href="#离散余弦变换，gabor-小波" class="headerlink" title="离散余弦变换，gabor,小波"></a>离散余弦变换，gabor,小波</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;傅里叶&lt;br&gt;</summary>
    
    
    
    <category term="学习" scheme="https://baishiqing.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="基础知识" scheme="https://baishiqing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>python基础语法</title>
    <link href="https://baishiqing.github.io/2022/02/11/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://baishiqing.github.io/2022/02/11/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2022-02-11T08:36:27.000Z</published>
    <updated>2022-05-07T10:50:01.802Z</updated>
    
    <content type="html"><![CDATA[<p>python语法<br><span id="more"></span><br>本文总结了一些细节性的语法知识</p><hr><h2 id="init的作用："><a href="#init的作用：" class="headerlink" title="init的作用："></a><strong>init</strong>的作用：</h2><ol><li>Python中package的标识，不能删除</li><li>定义<strong>all</strong>用来模糊导入：<br>在<strong>init</strong>文件中：<code>__all__ = [&quot;module1&quot;,&quot;module2&quot;]</code></li><li>批量导入外部目录的包<ul><li>在<strong>init</strong>文件中：<br><code>import os</code><br><code>imoprt sys</code></li><li>在所需引用的文件中：<br><code>import __init__所在的包名 as na</code><br>想使用init的包需要在包前加入命名空间na</li></ul></li><li><p>定义类时，相当于构造函数，自动调用==forward==的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>(ConvBNLayer, self).__init__() </span><br><span class="line"><span class="comment">#父类对象调用自已的init函数，来初始化子类</span></span><br><span class="line"><span class="comment">#父类的__call__会调用forward</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>参数类型</p></blockquote><ul><li><em>args表示可变参数(元组)  </em>ps:<code>*</code>的作用：1.函数实参，2.序列解包*</li><li>**kwargs表示关键字参数(字典)</li></ul><blockquote><p>惰性序列(迭代器)：</p></blockquote><p>迭代至某个元素才会去计算，节省了内存资源</p><blockquote><p>list与array:</p></blockquote><ul><li>list的元素类型不必相同，但需存储指针与元素类型；array的元素类型必须相同</li></ul><blockquote><p>range与np.arange:</p></blockquote><ul><li>range返回类型range，可用于迭代；arange返回类型numpy.ndarray，且步长可以是小数，可用于向量使用</li></ul><blockquote><p>zip:</p></blockquote><ul><li>zipped=zip(a,b)打包；a,b=zip(*zipped)解包</li></ul><blockquote><p>eval与ravel、flatten:</p></blockquote><h2 id="ravel-与flatten-都是将多维数组降为一维，其中flatten-不会对原矩阵产生影响；eval-执行字符串表达式并返回值"><a href="#ravel-与flatten-都是将多维数组降为一维，其中flatten-不会对原矩阵产生影响；eval-执行字符串表达式并返回值" class="headerlink" title="* ravel()与flatten()都是将多维数组降为一维，其中flatten()不会对原矩阵产生影响；eval()执行字符串表达式并返回值"></a>* ravel()与flatten()都是将多维数组降为一维，其中flatten()不会对原矩阵产生影响；eval()执行字符串表达式并返回值</h2><h2 id="os与sys："><a href="#os与sys：" class="headerlink" title="os与sys："></a>os与sys：</h2><blockquote><p><em>ps:<code>__file__</code>获取当前脚本路径</em></p><ul><li><code>os.system()</code>运行命令</li><li>os处理文件<ul><li>增<ul><li><code>os.mkdir()</code>创建单个目录</li><li><code>os.makedirs()</code>创建多级目录</li></ul></li><li>删<ul><li><code>os.remove</code> 删除一个文件</li><li><code>os.removedirs</code>删除多个文件夹</li></ul></li><li>改 <ul><li><code>os.renames(old,new)</code>递归重命名目录或文件</li></ul></li></ul></li></ul></blockquote><pre><code>---* `os.path.split()`分离文件名,返回两个值* `os.path.splitext()`分离扩展名,返回两个值* `os.path.join(dir,filename)`拼接目录名和文件名</code></pre><ul><li>查<ul><li><code>os.getcwd()</code>获取所在文件夹路径    </li><li><code>os.listdir</code>返回指定目录下的所有文件和文件夹</li></ul><hr><ul><li><code>os.path.abspath()</code>获取文件的绝对路径</li><li><code>os.path.realpath()</code>获取文件的绝对路径(这是快捷方式对应文件的路径,而非软链接所在的路径)</li><li><code>os.path.basename()</code>获取文件名称</li><li><code>os.path.dirname()</code>获取所在文件夹路径,可嵌套使用</li><li><code>os.path.isfile()</code>检验路径是否为文件</li><li><code>os.path.isdir()</code>检验路径是否为文件夹</li><li><code>os.path.exists()</code>检验路径是否真实存在</li></ul></li></ul><h2 id="sys-path获取列表形式的文件路径、sys-argv获取脚本参数"><a href="#sys-path获取列表形式的文件路径、sys-argv获取脚本参数" class="headerlink" title="* sys.path获取列表形式的文件路径、sys.argv获取脚本参数"></a>* <code>sys.path</code>获取列表形式的文件路径、<code>sys.argv</code>获取脚本参数</h2><h2 id="文件的输入输出"><a href="#文件的输入输出" class="headerlink" title="文件的输入输出"></a>文件的输入输出</h2><p>将内容输出到文件中</p><p><code>print(&#39;test1&#39;,&#39;test2&#39;,2022,sep=&#39;\n&#39;,file=open(&#39;hello.txt&#39;,&#39;w&#39;,encoding=&#39;utf-8&#39;))</code></p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span>(<span class="params">filename</span>):</span></span><br><span class="line">  <span class="comment"># with可以自动释放缓存</span></span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    content=f.readlines()</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure></h2><h2 id="序列化pickle与json"><a href="#序列化pickle与json" class="headerlink" title="序列化pickle与json"></a>序列化pickle与json</h2><ul><li>api<ul><li>dump写入文件</li><li>dumps生成<strong>序列化</strong>字符串</li><li>load文件加载</li><li>loads把序列化的字符串<strong>反向解析</strong></li></ul></li><li>不同 <ul><li>json —&gt; 实现Python数据类型与通用（json）字符串之间的转换<br>所有语言都支持<br>只支持常规数据类型，如str、int、tuple、list、set、dict</li><li>pickle —&gt; 实现Python数据类型与Python特定二进制格式之间的转换<br>支持python<br>支持py的所有数据类型<h3 id="json序列化"><a href="#json序列化" class="headerlink" title="json序列化"></a>json序列化</h3></li></ul></li></ul><blockquote><p>数据类型对应关系</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:left">Python</th><th style="text-align:right">Json</th></tr></thead><tbody><tr><td style="text-align:left">dict</td><td style="text-align:right">Object</td></tr><tr><td style="text-align:left">list,tuple</td><td style="text-align:right">array</td></tr><tr><td style="text-align:left">str</td><td style="text-align:right">string</td></tr><tr><td style="text-align:left">int,float,int-</td><td style="text-align:right">numbers</td></tr><tr><td style="text-align:left">True</td><td style="text-align:right">true</td></tr><tr><td style="text-align:left">False</td><td style="text-align:right">false</td></tr><tr><td style="text-align:left">None</td><td style="text-align:right">null</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">Python</th><th style="text-align:right">Json</th></tr></thead><tbody><tr><td style="text-align:left">Object</td><td style="text-align:right">dict</td></tr><tr><td style="text-align:left">array</td><td style="text-align:right">list</td></tr><tr><td style="text-align:left">string</td><td style="text-align:right">str</td></tr><tr><td style="text-align:left">number(int)</td><td style="text-align:right">int</td></tr><tr><td style="text-align:left">number(real)</td><td style="text-align:right">float</td></tr><tr><td style="text-align:left">true</td><td style="text-align:right">True</td></tr><tr><td style="text-align:left">false</td><td style="text-align:right">False</td></tr><tr><td style="text-align:left">null</td><td style="text-align:right">None</td></tr></tbody></table></div><blockquote><p>注意自定义的数据类型需要转换：</p><ul><li><blockquote><p>序列化:Python对象 —&gt; dict —&gt; JSON object</p></blockquote></li><li><blockquote><p>反序列化:JSON object -&gt; dict —&gt; Python对象</p></blockquote></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#序列化</span></span><br><span class="line"><span class="comment">#indent缩进:JSON的array元素和object成员会以相应的缩进级别进行打印输出</span></span><br><span class="line"><span class="comment">#separators的值必须是tuple,通过赋值(&#x27;,&#x27;,&#x27;:&#x27;)来消除空白字符</span></span><br><span class="line"><span class="comment">#ensure_ascii设置为False,中文可显示</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">a=json.dumps(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;中国 &#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">11.1</span>, <span class="string">&#x27;d&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;f&#x27;</span>:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;g&#x27;</span>: (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;,sort_keys=<span class="literal">True</span>,separators=(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;:&#x27;</span>),ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a:&quot;</span>,a)</span><br><span class="line"><span class="comment">#反序列化</span></span><br><span class="line">b=json.loads(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b:&quot;</span>,b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#序列化到文件中</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json.dump(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;str中国&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">11.1</span>, <span class="string">&#x27;d&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;f&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;g&#x27;</span>: (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;, fp,indent=<span class="number">4</span>)</span><br><span class="line"><span class="comment">#反序列化文件中的内容</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="built_in">print</span>(json.load(fp))</span><br></pre></td></tr></table></figure><h3 id="pickle序列化"><a href="#pickle序列化" class="headerlink" title="pickle序列化"></a>pickle序列化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">text = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;str&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">11.1</span>, <span class="string">&#x27;d&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;f&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;g&#x27;</span>:(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)&#125;</span><br><span class="line"><span class="comment">#序列化</span></span><br><span class="line">a = pickle.dumps(text)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#反序列化</span></span><br><span class="line">b = pickle.loads(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#持久化到文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pickle.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(text , f)</span><br><span class="line"><span class="comment"># 从文件中读取数据</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pickle.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    b = pickle.load(f)</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>详见：<a href="https://www.cnblogs.com/yyds/p/6563608.html">https://www.cnblogs.com/yyds/p/6563608.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python语法&lt;br&gt;</summary>
    
    
    
    <category term="学习" scheme="https://baishiqing.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="基础知识" scheme="https://baishiqing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://baishiqing.github.io/2022/02/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://baishiqing.github.io/2022/02/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-02-11T08:30:17.000Z</published>
    <updated>2022-03-15T11:58:05.255Z</updated>
    
    <content type="html"><![CDATA[<p>正则<br><span id="more"></span></p><h1 id="正则表达式-Regular-Expression"><a href="#正则表达式-Regular-Expression" class="headerlink" title="正则表达式(Regular Expression)"></a>正则表达式(Regular Expression)</h1><blockquote><p>作用：匹配指定规则的字符串</p><p>基础用法:</p><ul><li>限定符</li><li>或运算符</li><li>字符类</li><li>元字符</li><li>贪婪/懒惰匹配</li></ul></blockquote><p><img src="https://img-blog.csdnimg.cn/f086019466404918a262bff3969f23b4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYmxhY2tzdW5kYXky,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="reg基础语法"></p><blockquote><p>ps:<code>()</code>可以当作分组;由于匹配规则含有转义符<code>\</code>,一般前面都要加上<strong>r</strong></p></blockquote><h2 id="Python中的re正则表达式"><a href="#Python中的re正则表达式" class="headerlink" title="Python中的re正则表达式"></a>Python中的re正则表达式</h2><ul><li>re.match从头匹配</li><li>re.search匹配包含</li><li>re.findall匹配所有并返回列表</li><li>re.split将匹配到的字符当作分隔符</li><li>re.sub匹配字符并替换</li></ul><p>常用re.search来匹配：</p><ul><li><code>re.search(pattern,str,flag)</code>获得对象;</li><li><code>re.search(pattern,str,flag).span()</code>获得匹配的位置;</li><li><code>re.search(pattern,str,flag).group(num)</code>获得匹配到的字符串，在str加入<code>()</code>实现分组</li><li><code>re.search(pattern,str,flag).groups()[num]</code>获得分组匹配到的字符串，并返回列表，与上句等效 </li></ul><blockquote><p>举个栗子：</p></blockquote><p>分隔符<code>|</code>的作用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;匹配0-100之间的所有数字&#x27;</span>)</span><br><span class="line">pattern100=<span class="string">r&#x27;[1-9]?\d$|100$&#x27;</span></span><br><span class="line">s=<span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="comment"># s=&#x27;11&#x27;</span></span><br><span class="line"><span class="comment"># s=&#x27;99&#x27;</span></span><br><span class="line"><span class="comment"># s=&#x27;100&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.search(pattern100, s))</span><br></pre></td></tr></table></figure><br>分组<code>()</code>的作用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;匹配网页标签内的数据:&#x27;</span>)</span><br><span class="line">pattern=<span class="string">r&#x27;&lt;(.+)&gt;&lt;(.+)&gt;.+&lt;/\2&gt;&lt;/\1&gt;&#x27;</span></span><br><span class="line">s=<span class="string">&#x27;&lt;html&gt;&lt;body&gt;body部分&lt;/body&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">s2=<span class="string">&#x27;&lt;html&gt;&lt;title&gt;body部分&lt;/body&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.search(pattern,s).group())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;(?P&lt;name&gt;)起组名与(?P=name)使用该组名:&#x27;</span>)</span><br><span class="line">pattern2=<span class="string">r&#x27;&lt;(?P&lt;k_html&gt;.+)&gt;&lt;(?P&lt;k_body&gt;.+)&gt;.+&lt;/(?P=k_body)&gt;&lt;/(?P=k_html)&gt;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.search(pattern2, s).group())</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;正则&lt;br&gt;</summary>
    
    
    
    <category term="学习" scheme="https://baishiqing.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="基础知识" scheme="https://baishiqing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>AI算法</title>
    <link href="https://baishiqing.github.io/2022/01/08/AI%E7%AE%97%E6%B3%95/"/>
    <id>https://baishiqing.github.io/2022/01/08/AI%E7%AE%97%E6%B3%95/</id>
    <published>2022-01-08T02:48:05.000Z</published>
    <updated>2022-03-04T03:16:20.319Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><a href="http://www.huaxiaozhuan.com">AI算法工程师手册</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;&lt;a href=&quot;http://www.huaxiaozhuan.com&quot;&gt;AI算法工程师手册&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="学习" scheme="https://baishiqing.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="AI基础" scheme="https://baishiqing.github.io/tags/AI%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>降维算法</title>
    <link href="https://baishiqing.github.io/2022/01/03/%E9%99%8D%E7%BB%B4%E7%AE%97%E6%B3%95/"/>
    <id>https://baishiqing.github.io/2022/01/03/%E9%99%8D%E7%BB%B4%E7%AE%97%E6%B3%95/</id>
    <published>2022-01-03T08:18:14.000Z</published>
    <updated>2022-03-15T11:55:59.474Z</updated>
    
    <content type="html"><![CDATA[<p>算法<br><span id="more"></span></p><h1 id="PCA主成分分析算法-Principal-Components-Analysis"><a href="#PCA主成分分析算法-Principal-Components-Analysis" class="headerlink" title="PCA主成分分析算法(Principal Components Analysis)"></a>PCA主成分分析算法(Principal Components Analysis)</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>通过<strong>正交线性组合</strong>方式，<strong>最大化保留样本间方差</strong>的<strong>降维</strong>方法</p><h2 id="性质："><a href="#性质：" class="headerlink" title="性质："></a>性质：</h2><ul><li>线性映射<ul><li>所有样本点到超平面的距离最近</li><li>样本点在这个超平面的投影尽可能分散：为了找到合适的基向量</li></ul></li><li>非监督</li><li>全局</li></ul><p>名词解释：</p><ul><li>降维：将样本原来的m维特征用更少的k个特征取代。降维算法可以理解成一种数据压缩方法，它可能会丢失一些信息。</li><li>正交线性组合：k个新特征是通过对m个旧特征进行线性组合产生的，并且k个线性组合的系数向量为单位向量，且彼此相互正交。</li><li>最大化保留样本间方差：选取数据离散程度最大的方向(方差最大的方向)作为第一主成分，第二主成分选择方差次大的方向，并且与第一个主成分正交。重复这个过程直到找到k个主成分。</li></ul><p><em>ps：用几何观点来看，PCA可以看成：通过正交变换对坐标系进行旋转和平移，并保留样本点投影坐标方差最大的前几个新的坐标。</em></p><h2 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h2><p>以较低的信息损失(以样本间分布方差衡量)减少特征数量。分析样本中分布差异最大的成分(主成分)，有助于数据可视化(降低到2维或3维后可以用散点图可视化)。</p><h2 id="举例说明："><a href="#举例说明：" class="headerlink" title="举例说明："></a>举例说明：</h2><p>调用sklearn中的PCA降维算法接口对波士顿房价数,将13维降到7维:<br>首先要对样本进行平移使其重心在原点，并且消除不同特征数值大小的影响，转换为统一量纲：</p><ul><li>加载数据集  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="title">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line"><span class="title">boston</span> = datasets.load_boston()</span><br><span class="line"><span class="title">dfdata</span> = pd.<span class="type">DataFrame</span>(boston.<span class="class"><span class="keyword">data</span>,columns = boston.feature_names)</span></span><br><span class="line"><span class="title">dfdata</span>.head()</span><br></pre></td></tr></table></figure></li><li>中心化、标准正态归一化  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from sklearn<span class="selector-class">.preprocessing</span> import StandardScaler</span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">scaler<span class="selector-class">.fit</span>(dfdata.values)</span><br><span class="line">X_input = scaler<span class="selector-class">.transform</span>(dfdata.values)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(X_input.shape)</span></span> #输入有<span class="number">506</span>个样本，<span class="number">13</span>维特征</span><br></pre></td></tr></table></figure></li><li>应用PCA进行降维  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.decomposition import <span class="keyword">PCA</span></span><br><span class="line"><span class="keyword">pca</span> = <span class="keyword">PCA</span>(n_components=7)</span><br><span class="line"><span class="keyword">pca</span>.<span class="keyword">fit</span>(X_input)</span><br><span class="line">X_output = <span class="keyword">pca</span>.transform(X_input)    </span><br><span class="line"><span class="keyword">print</span>(X_output.shape) # 降到7维特征</span><br></pre></td></tr></table></figure></li><li>查看各个主成分对应的方差大小和占全部方差的比例  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;explained_variance:&quot;</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(pca.explained_variance_)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;explained_variance_ratio:&quot;</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(pca.explained_variance_ratio_)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;total explained variance ratio of first 7 principal components:&quot;</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(sum(pca.explained_variance_ratio_)</span></span> #前<span class="number">7</span>个主成分已经解释了样本分布的<span class="number">90%</span></span><br></pre></td></tr></table></figure></li><li>可视化各个主成分贡献的方差  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline #下面的代码可以不用写 plt.show()</span><br><span class="line">%config InlineBackend.figure_format = <span class="string">&#x27;svg&#x27;</span> #设置矢量图提高分辨率</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(np.arange(1,8),pca.explained_variance_,<span class="attribute">linewidth</span>=2)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;components_n&#x27;</span>, <span class="attribute">fontsize</span>=16)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;explained_variance_&#x27;</span>, <span class="attribute">fontsize</span>=16)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li>对降维后的数据的前两维进行散点图可视化  <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%matplotlib inline</span></span><br><span class="line"><span class="comment">%config InlineBackend.figure_format = &#x27;svg&#x27;</span></span><br><span class="line"></span><br><span class="line">plt.scatter(<span class="symbol">X_output</span>[:,<span class="number">0</span>],<span class="symbol">X_output</span>[:,<span class="number">1</span>])</span><br><span class="line">plt.xlabel(<span class="string">&quot;components_1&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;components_2&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;算法&lt;br&gt;</summary>
    
    
    
    <category term="学习" scheme="https://baishiqing.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="数学建模" scheme="https://baishiqing.github.io/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>数学建模总结</title>
    <link href="https://baishiqing.github.io/2021/12/31/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E6%80%BB%E7%BB%93/"/>
    <id>https://baishiqing.github.io/2021/12/31/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-31T07:10:52.000Z</published>
    <updated>2022-03-15T11:57:06.677Z</updated>
    
    <content type="html"><![CDATA[<p>建模总结<br><span id="more"></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;建模总结&lt;br&gt;</summary>
    
    
    
    <category term="学习" scheme="https://baishiqing.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="数学建模" scheme="https://baishiqing.github.io/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>时间序列问题</title>
    <link href="https://baishiqing.github.io/2021/12/31/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/"/>
    <id>https://baishiqing.github.io/2021/12/31/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/</id>
    <published>2021-12-31T07:08:14.000Z</published>
    <updated>2022-03-15T11:56:32.331Z</updated>
    
    <content type="html"><![CDATA[<p>序列问题<br><span id="more"></span></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>时间序列过程是按时间排序的随机变量的集合，这个随机过程可以表示为</p><script type="math/tex; mode=display">\{X_t|t \in T\}</script><h3 id="符号定义"><a href="#符号定义" class="headerlink" title="符号定义"></a>符号定义</h3><ul><li>$T$是决定<strong>时序过程</strong>以及<strong>产生观测值</strong>的一个时间集合,</li><li>随机变量(Random variables)用大写字母表示，即$X_t$</li><li>观测值(Observations)用小写字母表示，即$x_t$</li></ul><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>描述过去</li><li>分析规律</li><li>预测未来</li></ul><h2 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h2><h3 id="平稳序列"><a href="#平稳序列" class="headerlink" title="平稳序列"></a>平稳序列</h3><p>序列中的各观察值基本上在某个固定的水平随机波动</p><h3 id="非平稳序列"><a href="#非平稳序列" class="headerlink" title="非平稳序列"></a>非平稳序列</h3><ul><li>趋势（Trend）:时间序列数据均值随时间的长期持续变化</li><li>季节性影响（Seasonal effect）:以固定间隔重复的周期性波动</li><li>循环波动（cyclical fluctuation）：围绕长期趋势的一种波浪式或振荡式波动</li><li>无法解释的变化（Unexplained variation）:无法解释的变化是在任何趋势和季节性变化被去除后时间序列中其余的变化</li></ul><p>加法模型（Additive）：</p><script type="math/tex; mode=display">X_t=m_t+s_t+e_t</script><p>乘法模型（Multiplicative）：</p><script type="math/tex; mode=display">X_t=m_t*s_t*e_t</script><p>其中$m_t$表示趋势，$s_t$表示季节，$e_t$表示无法解释的变化。<br>ps:当趋势和季节性变化独立作用时，加法模型是合适的，而如果季节性效应的大小取决于趋势的大小，则需要乘法模型。</p><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><ul><li>均值</li><li>方差，标准差</li><li>自协方差(autocovariance function (ACVF))：两个变量的总体误差</li><li>自相关函数(autocorrelation function (ACF))</li></ul><p>后两条可衡量线性的相关性，“auto”前缀表示不同时间点的随机变量的测量属性都存在。相关性是介于 -1 和 1 之间的协方差的缩放表现，其中 1 表示强正相关，0 表示独立性，-1 表示强负相关。</p><h3 id="图例："><a href="#图例：" class="headerlink" title="图例："></a>图例：</h3><ul><li><p>考虑由纯随机过程 生成的时间序列，它没有趋势、季节性或短期相关性<br><img src="https://s4.ax1x.com/2021/12/31/Thb1SK.jpg" alt="purely random data"></p></li><li><p>没有趋势或季节性但具有短期相关性的时间序列数据;在前几个滞后时具有显着正的自相关，随后在较大滞后时值接近零<br><img src="https://s4.ax1x.com/2021/12/31/Thb4pV.jpg" alt="short-term correlation"></p></li><li><p>没有趋势或季节性但在大值和小值之间交替的时间序列数据;在奇数滞后时具有负自相关，在偶数滞后时具有正自相关。随着滞后的增加，自相关越来越接近于零<br><img src="https://s2.loli.net/2021/12/31/gO9zhqNx2UZ8Qpi.jpg" alt="alternating data"></p></li><li><p>具有趋势的时间序列数据如下图所示，并且在滞后偏大时仍然具有正自相关。如果趋势随时间下降，则会观察到相同的相关图<br><img src="https://s4.ax1x.com/2021/12/31/ThqP7d.jpg" alt="data with a trend"></p></li><li><p>具有季节性影响的时间序列数据如下图所示，并且在相关图中具有规则的季节性模式。<br><img src="https://s4.ax1x.com/2021/12/31/ThqZ1f.jpg" alt="data with a seasonal effect">]</p></li><li><p>具有趋势和季节性影响的时间序列数据显示在下图中，并且在相关图中具有规则的季节性模式，由于趋势的存在，相关图通常具有正值。<br><img src="https://s4.ax1x.com/2021/12/31/Thq1Nn.jpg" alt="data with a trend and a seasonal effect">]</p></li></ul><h2 id="预测时间序列程序"><a href="#预测时间序列程序" class="headerlink" title="预测时间序列程序"></a>预测时间序列程序</h2><ol><li><p>确定时间序列成分</p><ol><li><p>确定趋势成分</p><p> 确定趋势成分是否存在，可<strong>绘制时间序列的线图</strong>，看时间序列是否存在趋势，以及存在趋势是线性还是非线性。利用回归分析拟合一条趋势线，对回归系数进行显著性检验。回归系数显著，可得出线性趋势显著的结论。<br> <em>代码待定</em></p></li><li><p>确定季节成分</p><p> 确定季节成分是否存在，至少需要两年数据，且数据需要按季度、月份、周或天来记录。可绘制<strong>年度折叠时间序列图</strong>（folded annual time series plot），需要将每年的数据分开画在图上，横轴只有一年的长度，每年的数据分别对应纵轴。如果时间序列<strong>只存在</strong>季节成分，年度折叠时间序列图中的折线将<strong>会有交叉</strong>；如果时间序列既含有季节成分又含有趋势，则年度折叠时间序列图中的折线将不会有交叉。<br> <a href="https://mp.weixin.qq.com/s/0qHgORqTAAzw7MuhH_Zi7w">实例详见</a></p></li></ol></li><li><p>选择预测方法<br><img src="https://img-blog.csdn.net/20180917120019798?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21lbmdqaXpoaXlvdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="预测方法"></p><ul><li>传统方法：简单平均法、移动平均法、指数平滑法等</li><li>目前方法：Box-Jenkins 的自回归模型（ARMA）</li></ul></li><li><p>预测方法的评估<p><br> 常用预测误差的计算方法：平均误差，平均绝对误差、均方误差、平均百分比误差、平均绝对百分比误差。</p></li><li>预测数据序列<ul><li>平稳序列的预测</li><li>趋势型序列的预测</li><li>复合型序列的分解预测</li></ul></li></ol><p><a href="https://mp.weixin.qq.com/s/1PsL_aW57-fSx7ku5Hs7PA">时序分析</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;序列问题&lt;br&gt;</summary>
    
    
    
    <category term="学习" scheme="https://baishiqing.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="网络结构" scheme="https://baishiqing.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>学习Pytorch</title>
    <link href="https://baishiqing.github.io/2021/12/30/%E5%AD%A6%E4%B9%A0Pytorch/"/>
    <id>https://baishiqing.github.io/2021/12/30/%E5%AD%A6%E4%B9%A0Pytorch/</id>
    <published>2021-12-30T13:15:43.000Z</published>
    <updated>2022-08-16T02:43:53.877Z</updated>
    
    <content type="html"><![CDATA[<p>pytorch<br><span id="more"></span></p><p><a href="https://handbook.pytorch.wiki/index.html">Pytorch中文百科</a></p><p><a href="https://tangshusen.me/Dive-into-DL-PyTorch/#/">Dive into DL Pytorch</a><p></p><ul><li><a href="https://blog.csdn.net/pan_andy/article/details/100992584">博客综述</a></li><li><a href="https://github.com/ShusenTang/Dive-into-DL-PyTorch">代码实现</a></li></ul><h2 id="Tensor的使用"><a href="#Tensor的使用" class="headerlink" title="Tensor的使用"></a>Tensor的使用</h2><ul><li>版本查询  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(torch.__version__)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(torch.version.cuda)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(torch.backends.cudnn.version()</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(torch.cuda.get_device_name(<span class="number">0</span>)</span></span>)</span><br></pre></td></tr></table></figure></li><li>输出GPU个数  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(torch.cuda.device_count()</span></span>)</span><br></pre></td></tr></table></figure></li><li>在GPU做张量运算  <figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor.cuda(<span class="keyword">X</span>)</span><br><span class="line"><span class="keyword">Y</span>=<span class="keyword">X</span>.cuda(device)将<span class="keyword">X</span>张量copy到某device的<span class="keyword">Y</span>张量</span><br></pre></td></tr></table></figure></li><li>将网络模型copy到某device  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">device</span> = torch.device(<span class="string">&quot;cuda&quot;</span>)</span><br><span class="line"><span class="attr">net</span>=net.to(device)</span><br></pre></td></tr></table></figure></li><li>确认模型参数在GPU上  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net<span class="selector-attr">[0]</span><span class="selector-class">.weight</span><span class="selector-class">.data</span><span class="selector-class">.device</span> 网络中第一个层的权重数据的设备</span><br></pre></td></tr></table></figure>  <mark>一般需要放在GPU中:</li><li>网络模型</li><li>损失函数</li><li>(训练与测试时的)输入数据<br>&lt;/mark&gt;</li></ul><blockquote><p>GPU的数据copy到CPU很慢,GPU是硬件,cuda可以看做GPU的编译器</p></blockquote><ul><li><p>显卡设置</p><ul><li><p>单张显卡:<br><code>device = torch.device(&#39;cuda&#39; if torch.cuda.is_available() else &#39;cpu&#39;)</code></p></li><li><p>多张显卡:</p>  <figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">os</span></span><br><span class="line"><span class="built_in">os</span>.environ[<span class="string">&#x27;CUDA_VISIBLE_DEVICES&#x27;</span>] = <span class="string">&#x27;0,1&#x27;</span>     </span><br></pre></td></tr></table></figure></li><li><p>清除显存:</p><ul><li><p>清除缓存区:<br><code>torch.cuda.empty_cache()</code></p></li><li><p>也可以使用命令行重置GPU:<br><code>nvidia-smi --gpu-reset -i [gpu_id]</code></p></li></ul></li><li><p>查看占用的显存:</p><ul><li><p>当前进程中torch.Tensor所占用的GPU显存:<br><code>torch.cuda.memory_allocated()</code></p></li><li><p>当前进程所分配的显存缓冲区<br><code>torch.cuda.memory_reserved()</code></p></li></ul></li></ul></li><li><p>数据类型</p>  <figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tensor = torch.randn(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(tensor.<span class="keyword">type</span>())  # 数据类型</span><br><span class="line"><span class="built_in">print</span>(tensor.<span class="built_in">size</span>())  # 张量的<span class="built_in">shape</span>，是个元组</span><br><span class="line"><span class="built_in">print</span>(tensor.<span class="built_in">dim</span>())   # 维度的数量</span><br></pre></td></tr></table></figure></li><li><p>使用维度做索引</p>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">NCHW</span> =<span class="meta"> [‘N’, ‘C’, ‘H’, ‘W’]</span></span><br><span class="line"><span class="attribute">images</span> = torch.randn(<span class="number">32</span>, <span class="number">3</span>, <span class="number">56</span>, <span class="number">56</span>, names=NCHW)</span><br><span class="line"><span class="attribute">images</span>.sum(&#x27;C&#x27;)</span><br><span class="line"><span class="attribute">images</span>.select(&#x27;C&#x27;, index=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>Torch.tensor与np.ndarray转换</p>  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ndarray</span>=tensor.cpu().numpy()</span><br><span class="line"><span class="attr">tensor</span> = torch.from_numpy(ndarray).float()</span><br></pre></td></tr></table></figure></li><li><p>Torch.tensor与PIL.Image转换</p><p>  <em>pytorch中的张量默认采用[N, C, H, W]的顺序，并且数据范围在[0,1]，需要进行转置和规范化</em></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># torch.Tensor -&gt; PIL.Image</span></span><br><span class="line">image = PIL.Image.fromarray(torch.clamp(tensor*<span class="number">255</span>, <span class="built_in">min</span>=<span class="number">0</span>, <span class="built_in">max</span>=<span class="number">255</span>).byte().permute(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>).cpu().numpy())</span><br><span class="line">image = torchvision.transforms.functional.to_pil_image(tensor)  <span class="comment">#方法二</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PIL.Image -&gt; torch.Tensor</span></span><br><span class="line">path = <span class="string">r&#x27;./figure.jpg&#x27;</span></span><br><span class="line">tensor = torch.from_numpy(np.asarray(PIL.Image.<span class="built_in">open</span>(path))).permute(<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>).<span class="built_in">float</span>() / <span class="number">255</span></span><br><span class="line">tensor = torchvision.transforms.functional.to_tensor(PIL.Image.<span class="built_in">open</span>(path)) <span class="comment">#方法二</span></span><br></pre></td></tr></table></figure><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2></li><li>DatasetFolder 先把数据在磁盘上组织好，格式如下：</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">folder<span class="regexp">/class_0/</span>file1.txt</span><br><span class="line">folder<span class="regexp">/class_0/</span>file2.txt</span><br><span class="line"></span><br><span class="line">folder<span class="regexp">/class_1/</span>file3.txt</span><br><span class="line">folder<span class="regexp">/class_1/</span>...</span><br></pre></td></tr></table></figure><h4 id="自定义代码加载："><a href="#自定义代码加载：" class="headerlink" title="自定义代码加载："></a>自定义代码加载：</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision.datasets <span class="keyword">import</span> DatasetFolder</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> <span class="type">Path</span></span><br><span class="line"># I have <span class="type">text</span> files <span class="keyword">in</span> this folder</span><br><span class="line">ds = DatasetFolder(&quot;/Users/marcin/Dev/tmp/my_text_dataset&quot;, </span><br><span class="line">    loader=lambda <span class="type">path</span>: Path(<span class="type">path</span>).read_text(),</span><br><span class="line">    extensions=(&quot;.txt&quot;,), #<span class="keyword">only</span> <span class="keyword">load</span> .txt files</span><br><span class="line">    <span class="keyword">transform</span>=lambda <span class="type">text</span>: <span class="type">text</span>[:<span class="number">100</span>], # <span class="keyword">only</span> take first <span class="number">100</span> characters</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># Everything you need <span class="keyword">is</span> already there</span><br><span class="line">len(ds), ds.classes, ds.class_to_idx</span><br><span class="line">(<span class="number">20</span>, [<span class="string">&#x27;novels&#x27;</span>, <span class="string">&#x27;thrillers&#x27;</span>], &#123;<span class="string">&#x27;novels&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;thrillers&#x27;</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="网络的使用"><a href="#网络的使用" class="headerlink" title="网络的使用"></a>网络的使用</h2><ul><li>神经网络层<ul><li>卷积层<ul><li>卷积运算：用一个模板在图像上寻找与它相似的区域，某个区域与卷积核越相似，激活值越高，从而实现特征提取</li></ul></li><li>池化层</li><li>全连接层</li><li>激活层</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;pytorch&lt;br&gt;</summary>
    
    
    
    <category term="学习" scheme="https://baishiqing.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="AI基础" scheme="https://baishiqing.github.io/tags/AI%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Inception网络</title>
    <link href="https://baishiqing.github.io/2021/12/30/Inception%E7%BD%91%E7%BB%9C/"/>
    <id>https://baishiqing.github.io/2021/12/30/Inception%E7%BD%91%E7%BB%9C/</id>
    <published>2021-12-30T13:11:20.000Z</published>
    <updated>2022-03-15T11:55:03.780Z</updated>
    
    <content type="html"><![CDATA[<p>网络结构<br><span id="more"></span></p><h1 id="Inception网络"><a href="#Inception网络" class="headerlink" title="Inception网络"></a>Inception网络</h1><h2 id="InceptionV1"><a href="#InceptionV1" class="headerlink" title="InceptionV1"></a>InceptionV1</h2><p>Inception层：带有1x1卷积核；多个Inception层组合在一起就构成了Inception网络。</p><p><strong>代表作：GoogleNet</strong><br><img src="https://img-blog.csdn.net/20180608215827629?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3liZGVzaXJl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Inception原始版本"></p><ul><li>C_1X1: 28x28x192的输入数据，与64个1x1的卷积核做卷积后，得到28x28x64的输出</li><li>C_3X3: 28x28x192的输入数据，与128个3x3的卷积核做卷积后，得到28x28x128的输出</li><li>C_5X5: 28x28x192的输入数据，与32个5x5的卷积核做卷积后，得到28x28x32的输出</li><li>MP: 28x28x192的输入数据，做MaxPooling后（带padding），得到28x28x32的输出</li></ul><p>原理：在Inception层中，有多个卷积层结构（Conv）和Pooling结构（MaxPooling），它们利用了padding的原理，让经过这些结构的最终结果Shape不变。</p><p><strong>利用1x1的卷积核来降低计算量(减少weights，降低dimension)：</strong><br><img src="https://img-blog.csdn.net/20180608215901622?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3liZGVzaXJl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="降维后的Inception版本"></p><h2 id="InceptionV2"><a href="#InceptionV2" class="headerlink" title="InceptionV2"></a>InceptionV2</h2><p>改进：</p><ul><li>加入BN(Batch Normalization)层：通过Reduce Internal Covariate Shift(减少内部数据分布发生变化，使每一层的输出都规范化到一个N(0, 1)的高斯);</li><li>使用2个3x3替代1个5x5卷积(既降低了参数数量，也加速计算)。<br><img src="https://www.pianshen.com/images/123/285d1cc3258f37d0e9679049734f0543.png" alt="InceptionV2"><br><strong>代表作：改进版GoogleNet</strong></li></ul><h2 id="InceptionV3"><a href="#InceptionV3" class="headerlink" title="InceptionV3"></a>InceptionV3</h2><p>改进：</p><ul><li>将7*7分解成两个一维的卷积（1x7,7x1），3x3也是一样（1x3,3x1），既可以加速学习，又加深了网络深度</li><li>增加了网络宽度</li></ul><p><strong>代表作：Inceptionv3版本的GoogleNet</strong></p><h2 id="InceptionV4"><a href="#InceptionV4" class="headerlink" title="InceptionV4"></a>InceptionV4</h2><p>改进：</p><ul><li>利用残差连接(Residual Connection)</li></ul><p><strong>代表作：Inception-ResNet-v1，Inception-ResNet-v2，Inception-v4</strong></p><h2 id="Xception"><a href="#Xception" class="headerlink" title="Xception"></a>Xception</h2><p>改进：</p><ul><li>通道分离式卷积：<br><img src="https://img-blog.csdn.net/20170915103536111" alt="Xception"><br>更改卷积操作顺序：Inception V3是先做1x1的通道卷积，再做3x3的空间卷积，这样就先将通道进行了合并;而Xception则正好相反，先进行空间的3x3卷积，再进行通道的1x1卷积</li><li>Xception在每个module中是没有RELU操作的</li></ul><p><a href="https://www.jianshu.com/p/25f0139637b7">数学公式md语法</a></p><script type="math/tex; mode=display">H_{out}=\lfloor \frac{H_{in}+2*padding[0]-dilation[0]*(kernel\_size[0]-1)-1}{stride[0]}+1 \rfloor</script><p>一般来说，默认padding=0,dilation=1,stride=1:<br>$H<em>{out}=H</em>{in}-kernel_size+1$</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;网络结构&lt;br&gt;</summary>
    
    
    
    <category term="学习" scheme="https://baishiqing.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="网络结构" scheme="https://baishiqing.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>IDEA打包</title>
    <link href="https://baishiqing.github.io/2021/12/27/IDEA%E6%89%93%E5%8C%85/"/>
    <id>https://baishiqing.github.io/2021/12/27/IDEA%E6%89%93%E5%8C%85/</id>
    <published>2021-12-27T07:59:41.000Z</published>
    <updated>2022-03-15T11:54:50.196Z</updated>
    
    <content type="html"><![CDATA[<p>IDEA打包<br><span id="more"></span></p><h1 id="IDEA打包方式：jar包与war包"><a href="#IDEA打包方式：jar包与war包" class="headerlink" title="IDEA打包方式：jar包与war包"></a>IDEA打包方式：jar包与war包</h1><p>jar包全称 Java Archive, 中文名叫 java 归档文件，这是一种与平台无关的文件格式。</p><p>war 包全称 JavaWeb Archive, 与 jar 包是类似。不过 war 包通常用于网站，它是一个可以直接运行的 web 模块。</p><p>一般主要是通过pom.xml决定你要打什么包</p><h2 id="前提知识："><a href="#前提知识：" class="headerlink" title="前提知识："></a>前提知识：</h2><ol><li>Project Structure(项目结构)</li><li>Artifacts选中Web Application: Exploded(工程组件的意思,可以理解为一个工程中的各个模块)</li><li>Archive是归档文件的意思</li></ol><h2 id="如何打包："><a href="#如何打包：" class="headerlink" title="如何打包："></a>如何打包：</h2><ul><li><p>无maven仓库：</p><ol><li>Project Structure-&gt;Artifacts-&gt;add Web Application:Exploded(若运行过IDEA项目，这一步可以忽略)</li><li>Project Structure-&gt;Artifacts-&gt;add Web Application:Archive</li><li>修改war包的一些属性<br><img src="https://s4.ax1x.com/2021/12/28/TrONGj.png" alt="Artifacts"><ul><li>Name:是war包的名字，可以随意定义</li><li>Type:是类型，这里是Archive的类型，也就是war包的类型</li><li>Output directory:是war包存储的位置，可以随意修改</li><li>Include in project build:如果把这个选项勾选，重新编译了之后，war包也会同步更新修改</li><li>Output Layout:是输出布局，也就是war包的目录结构</li></ul></li><li>Build-&gt;Build Artifacts-&gt;选中对应的war包-&gt;Build<br><img src="https://s3.bmp.ovh/imgs/2021/12/71caf75cf135ff99.png" alt="编译war包"><br><img src="https://s4.ax1x.com/2021/12/28/TrOCx1.png" alt="编译war包2"><ul><li>All Artifact:对所有模块进行操作</li><li>Build:进行编译打包</li><li>Rebuild:重现编译打包，会删除原来的war包，然后编译打包</li><li>Clean:清除war包</li><li>Edit:重新编辑war包的设置</li></ul></li></ol></li><li><p>有maven仓库：</p><ol><li>在IDEA界面的右边点击Maven-&gt;Lifecycle-&gt;clean-&gt;install</li><li>在控制台查看信息出现 BUILD SUCCESS 则打包成功</li><li>查看项目结构下会出现 target 文件夹(文件夹下的包需要看pom.xml)</li></ol></li></ul><h2 id="如何部署war包："><a href="#如何部署war包：" class="headerlink" title="如何部署war包："></a>如何部署war包：</h2><ol><li>在输出文件夹查看war包</li><li>将war包放到tomcat的webapps文件夹中(默认tomcat的conf文件夹下的server.xml配置)</li><li>进入Tomcat目录下的bin文件夹，双击运行startup.bat</li><li>在浏览器输入<a href="http://localhost:8080/war包名称">http://localhost:8080/war包名称</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;IDEA打包&lt;br&gt;</summary>
    
    
    
    <category term="学习" scheme="https://baishiqing.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="编程" scheme="https://baishiqing.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>一看就懂的md语法</title>
    <link href="https://baishiqing.github.io/2021/12/22/md%E8%AF%AD%E6%B3%95/"/>
    <id>https://baishiqing.github.io/2021/12/22/md%E8%AF%AD%E6%B3%95/</id>
    <published>2021-12-22T08:19:02.000Z</published>
    <updated>2022-04-22T07:15:28.734Z</updated>
    
    <content type="html"><![CDATA[<p>md语法<br><span id="more"></span><br><em>ps:其实md的底层最终还是将我们写的语法转化为html标签了,其中<code>\</code>表转义</em></p><h2 id="字体控制："><a href="#字体控制：" class="headerlink" title="字体控制："></a>字体控制：<p></h2><ul><li><p>*斜体内容*的效果：<em>斜体</em></p></li><li><p>**加粗**的效果：<strong>加粗</strong></p></li><li><p>***加粗斜体***的效果：<strong><em>加粗斜体</em></strong></p></li><li><p>~~删除~~的效果：<del>删除</del></p></li><li><p>`代码行`的效果：<code>代码行</code></p></li><li><p>```代码块```的效果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码块</span><br></pre></td></tr></table></figure></li><li><p>> 引用内容的效果：(&gt;后面要有空格)</p><blockquote><p>引用内容</p></blockquote><ul><li>引用可以嵌套，如：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> 一级引用</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; 二级引用</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 三级引用</span></span><br></pre></td></tr></table></figure>的效果：<blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p></blockquote></blockquote></blockquote></li></ul></li><li><p><code>---</code> <code>***</code>都可以表示分割线，效果如下：</p></li></ul><hr><hr><ul><li>注脚：<br>使用Markdown<sup><a href="#fn_1" id="reffn_1">1</a></sup>可以效率的书写文档,直接转换成HTML<sup><a href="#fn_2" id="reffn_2">2</a></sup></li></ul><ul><li>字体：  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span>我是黑体字<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;微软雅黑&quot;</span>&gt;</span>我是微软雅黑<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;STCAIYUN&quot;</span>&gt;</span>我是华文彩云<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#0099ff</span> <span class="attr">size</span>=<span class="string">2</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span>我是黑体<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">gray</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span>我是灰色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#00ffff</span> <span class="attr">size</span>=<span class="string">3</span>&gt;</span>我是荧光色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span>我是<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br></pre></td></tr></table></figure>  的效果：<p><br>  <font face="黑体">我是黑体字</font><br>  <font face="微软雅黑">我是微软雅黑</font><br>  <font face="STCAIYUN">我是华文彩云</font><br>  <font color=gray size=5>我是灰色</font><br>  <font color=#00ffff size=3>我是荧光色</font><br>   <mark>我是标记色</mark></li></ul><h2 id="格式控制："><a href="#格式控制：" class="headerlink" title="格式控制："></a>格式控制：<p></h2><ul><li>无序列表<ul><li>嵌套列表</li></ul></li><li>无序列表</li></ul><ol><li>有序列表<ol><li>嵌套列表</li></ol></li><li>有序列表</li></ol><h2 id="超链接："><a href="#超链接：" class="headerlink" title="超链接："></a>超链接：</h2><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fc-ssl.duitang.com%2Fuploads%2Fitem%2F202004%2F06%2F20200406132909_vm8TR.thumb.400_0.gif&amp;refer=http%3A%2F%2Fc-ssl.duitang.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1642750593&amp;t=90ca314547973d3d495d77a72b508b412" alt="皮卡丘fig"><br><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.doershow.com%2Fuploads%2Fallimg%2F130926%2F1120131158-8.jpg&amp;refer=http%3A%2F%2Fwww.doershow.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1642751061&amp;t=c1a5baa8cf5f7356945d44ae0d5686df" alt="皮卡丘"></p><p><a href="https://www.csdn.net">CSDN</a>是一个博客社区,任何人均可以在其上进行创作。</p><h2 id="数学公式："><a href="#数学公式：" class="headerlink" title="数学公式："></a>数学公式：</h2><p><a href="https://www.jianshu.com/p/25f0139637b7">数学公式md语法</a></p><p>行内公式：$ \Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt. $</p><p>行间公式：<script type="math/tex">\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt.</script></p><script type="math/tex; mode=display">H_{out}=\lfloor \frac{H_{in}+2*padding[0]-dilation[0]*(kernel\_size[0]-1)-1}{stride[0]}+1 \rfloor.</script><h2 id="表格设置："><a href="#表格设置：" class="headerlink" title="表格设置："></a>表格设置：<p></h2><p><em>冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中</em><p><br><code>:-</code>表示左对齐，<code>:-:</code>表示居中，<code>-:</code>表示右对齐</p><hr><div class="table-container"><table><thead><tr><th style="text-align:left">属性1</th><th style="text-align:center">属性2</th><th style="text-align:right">属性3</th></tr></thead><tbody><tr><td style="text-align:left">abc</td><td style="text-align:center">bcd</td><td style="text-align:right">cde</td></tr><tr><td style="text-align:left">abc</td><td style="text-align:center">bcd</td><td style="text-align:right">cde</td></tr><tr><td style="text-align:left">abc</td><td style="text-align:center">bcd</td><td style="text-align:right">cde</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;md语法&lt;br&gt;</summary>
    
    
    
    <category term="学习" scheme="https://baishiqing.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="基础知识" scheme="https://baishiqing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客设置</title>
    <link href="https://baishiqing.github.io/2021/12/22/blogSetting/"/>
    <id>https://baishiqing.github.io/2021/12/22/blogSetting/</id>
    <published>2021-12-22T03:50:27.000Z</published>
    <updated>2022-03-15T11:48:59.581Z</updated>
    
    <content type="html"><![CDATA[<p>废话不多说，我们直接开整<br><span id="more"></span></p><h1 id="设置博客摘要显示"><a href="#设置博客摘要显示" class="headerlink" title="设置博客摘要显示"></a>设置博客摘要显示</h1><p>修改主题配置文件，注意是theme文件夹下的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Automatically scroll page to section which is under &lt;!-- more --&gt; mark.</span></span><br><span class="line">scroll_to_more: <span class="literal">true</span> <span class="comment">#选取博客正文&lt;!--more--&gt;前的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically saving scroll position on each post/page in cookies.</span></span><br><span class="line">save_scroll: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically excerpt description in homepage as preamble text.</span></span><br><span class="line">excerpt_description: <span class="literal">true</span> <span class="comment">#自动截取摘要</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically Excerpt. Not recommend.</span></span><br><span class="line"><span class="comment"># Use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class="line">auto_excerpt: </span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span> <span class="comment">#自动截取一定程度的摘要</span></span><br><span class="line">  length: 150</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read more button</span></span><br><span class="line"><span class="comment"># If true, the read more button would be displayed in excerpt section.</span></span><br><span class="line">read_more_btn: <span class="literal">true</span> <span class="comment">#显示阅读全文按钮</span></span><br></pre></td></tr></table></figure><p><strong>记得在博客内容中加入：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure></p><h1 id="设置博客动态背景"><a href="#设置博客动态背景" class="headerlink" title="设置博客动态背景"></a>设置博客动态背景</h1><ol><li>修改_layout.swig文件</li></ol><p>打开 hexo-theme-next/layout/_layout.swig,在<code>&lt;body&gt;</code>中添加代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><ol><li>修改主题配置文件</li></ol><p>打开 /hexo-theme-next/_config.yml,在里面添加如下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># background settings</span></span><br><span class="line"><span class="comment"># --------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># add canvas-nest effect</span></span><br><span class="line"><span class="comment"># see detail from https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line">canvas_nest: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="设置博客评论功能"><a href="#设置博客评论功能" class="headerlink" title="设置博客评论功能"></a>设置博客评论功能</h1><p>这里用的是<strong>来必力</strong>评论，支持多方登录评论</p><ol><li>注册并登录<a href="https://www.livere.com">来必力</a>网站(只显示韩文)</li><li>点击网站中的安装，选择City版免费的，安装会跳转到安装代码<img src="https://img-blog.csdnimg.cn/dd54a22534a2446089ddf640dd71d797.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYmxhY2tzdW5kYXky,size_20,color_FFFFFF,t_70,g_se,x_16" alt="安装代码"></li><li>复制uid，打开主题配置文件_config.yml，搜索livere_uid，把uid填进去</li></ol><h1 id="设置页面宠物"><a href="#设置页面宠物" class="headerlink" title="设置页面宠物"></a>设置页面宠物</h1><p>1.在博客根目录下执行：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install -save hexo-helper-live<span class="number">2</span>d</span><br><span class="line"><span class="attribute">npm</span> install live<span class="number">2</span>d-widget-model-wanko</span><br></pre></td></tr></table></figure><br><strong>第一行是下载live2d插件，第二行是下载wanko这个宠物</strong><p><br><em>其中可能会遇到版本报错，不用理会即可</em><p><br>2.在站点配置文件中加入：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span>  <span class="comment">#选择哪种模型</span></span><br><span class="line">  <span class="attr">display:</span> <span class="comment">#放置位置和大小</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">false</span> <span class="comment">#是否在手机端显示</span></span><br></pre></td></tr></table></figure></p><blockquote><p>友情提示：由于github访问问题，在执行hexo d之后页面仍然没有效果，可以使用hexo s现在本地查看。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;废话不多说，我们直接开整&lt;br&gt;</summary>
    
    
    
    <category term="学习" scheme="https://baishiqing.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="基础知识" scheme="https://baishiqing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://baishiqing.github.io/2021/12/18/test/"/>
    <id>https://baishiqing.github.io/2021/12/18/test/</id>
    <published>2021-12-18T10:10:22.000Z</published>
    <updated>2022-03-15T11:55:39.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="this-is-a-test"><a href="#this-is-a-test" class="headerlink" title="this is a test"></a>this is a test</h2><span id="more"></span><p>写作动力：就是玩</p><p><strong>说明</strong><br>&emsp;&emsp;这是一个说明</p><blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><p><img src="https://img2.baidu.com/it/u=1917350432,4231958219&amp;fm=26&amp;fmt=auto" alt="test"><br><img src="https://img0.baidu.com/it/u=1985874529,2483152613&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=889&amp;h=500" alt="test"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;this-is-a-test&quot;&gt;&lt;a href=&quot;#this-is-a-test&quot; class=&quot;headerlink&quot; title=&quot;this is a test&quot;&gt;&lt;/a&gt;this is a test&lt;/h2&gt;</summary>
    
    
    
    <category term="娱乐" scheme="https://baishiqing.github.io/categories/%E5%A8%B1%E4%B9%90/"/>
    
    
    <category term="test" scheme="https://baishiqing.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://baishiqing.github.io/2021/12/18/hello-world/"/>
    <id>https://baishiqing.github.io/2021/12/18/hello-world/</id>
    <published>2021-12-18T10:00:03.565Z</published>
    <updated>2022-03-15T11:54:31.411Z</updated>
    
    <content type="html"><![CDATA[<p>你好！<br> <span id="more"></span><br>欢迎来到 <a href="https://hexo.io/">Hexo</a>！ 这是你的第一篇文章，查看 <a href="https://hexo.io/docs/">文档</a> 了解更多信息。如果你在使用 Hexo 时遇到任何问题，可以在<a href="https://github.com/hexojs/hexo/issues">GitHub</a> 上询问。<br> <!-- more --></p><h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><h2 id="创建一个新帖子"><a href="#创建一个新帖子" class="headerlink" title="创建一个新帖子"></a>创建一个新帖子</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><h2 id="创建另起一页"><a href="#创建另起一页" class="headerlink" title="创建另起一页"></a>创建另起一页</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page board</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h2 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h2 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a>s</p><h2 id="部署简写"><a href="#部署简写" class="headerlink" title="部署简写"></a>部署简写</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;你好！&lt;br&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
